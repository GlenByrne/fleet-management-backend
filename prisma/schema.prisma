datasource db {
  provider = "postgresql"
  url      = "postgres://ngkrtbylzcryjh:0f06d528b4b492d6fe6a4f59c1d576e3a19077f8dfe8d823491c030baabc0bd4@ec2-176-34-116-203.eu-west-1.compute.amazonaws.com:5432/ddt8nlq9uijdkn"
}

generator client {
  provider = "prisma-client-js"
}

model Company {
  id        String     @id @default(uuid())
  name      String
  users     User[]
  vehicles  Vehicle[]
  depots    Depot[]
  fuelCards FuelCard[]
  tollTags  TollTag[]
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  role      Role    @default(USER)
  depot     Depot?  @relation(fields: [depotId], references: [id])
  depotId   String?
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
}

model Vehicle {
  id                     String                  @id @default(uuid())
  type                   VehicleType
  registration           String                  @unique
  make                   String
  model                  String
  owner                  String
  cvrt                   Cvrt?
  thirteenWeekInspection ThirteenWeekInspection?
  tachoCalibration       TachographCalibration?
  depot                  Depot?                  @relation(fields: [depotId], references: [id])
  depotId                String?
  fuelCard               FuelCard?
  tollTag                TollTag?
  defects                Defect[]
  company                Company                 @relation(fields: [companyId], references: [id])
  companyId              String
}

model Depot {
  id        String     @id @default(uuid())
  name      String     @unique
  vehicles  Vehicle[]
  fuelCards FuelCard[]
  tollTags  TollTag[]
  User      User[]
  company   Company    @relation(fields: [companyId], references: [id])
  companyId String
}

model FuelCard {
  id           String   @id @default(uuid())
  cardNumber   String   @unique
  cardProvider String
  vehicle      Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId    String?  @unique
  depot        Depot?   @relation(fields: [depotId], references: [id])
  depotId      String?
  company      Company  @relation(fields: [companyId], references: [id])
  companyId    String
}

model TollTag {
  id          String   @id @default(uuid())
  tagNumber   String   @unique
  tagProvider String
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?  @unique
  depot       Depot?   @relation(fields: [depotId], references: [id])
  depotId     String?
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
}

model Defect {
  id            String    @id @default(uuid())
  description   String
  dateReported  DateTime
  dateCompleted DateTime?
  status        String
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId     String    @unique
}

model Cvrt {
  id        String   @id @default(uuid())
  dueDate   DateTime
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String   @unique
}

model ThirteenWeekInspection {
  id           String    @id @default(uuid())
  dueDate      DateTime
  previousDate DateTime?
  vehicle      Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId    String    @unique
}

model TachographCalibration {
  id           String    @id @default(uuid())
  dueDate      DateTime
  previousDate DateTime?
  vehicle      Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId    String    @unique
}

enum VehicleType {
  VAN
  TRUCK
  TRAILER
}

enum Role {
  USER
  DRIVER
  ADMIN
}
