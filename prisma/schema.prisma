datasource db {
  provider = "postgresql"
  url      = "postgres://ngkrtbylzcryjh:0f06d528b4b492d6fe6a4f59c1d576e3a19077f8dfe8d823491c030baabc0bd4@ec2-176-34-116-203.eu-west-1.compute.amazonaws.com:5432/ddt8nlq9uijdkn"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(USER)
  depot         Depot?         @relation(fields: [depotId], references: [id])
  depotId       String?
  infringements Infringement[]
}

model Vehicle {
  id                     String      @id @default(uuid())
  type                   VehicleType
  registration           String      @unique
  make                   String
  model                  String
  owner                  String
  cvrt                   DateTime?
  thirteenWeekInspection DateTime?
  tachoCalibration       DateTime?
  depot                  Depot?      @relation(fields: [depotId], references: [id])
  depotId                String?
  fuelCard               FuelCard?
  tollTag                TollTag?
  defects                Defect[]
}

model Depot {
  id       String    @id @default(uuid())
  name     String    @unique
  vehicles Vehicle[]
  User     User[]
}

model FuelCard {
  id           String   @id @default(uuid())
  cardNumber   String   @unique
  cardProvider String
  vehicle      Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId    String?  @unique
}

model TollTag {
  id          String   @id @default(uuid())
  tagNumber   String   @unique
  tagProvider String
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?  @unique
}

model Defect {
  id            String       @id @default(uuid())
  description   String
  reporter      String
  dateReported  DateTime
  dateCompleted DateTime?
  status        DefectStatus @default(INCOMPLETE)
  vehicle       Vehicle      @relation(fields: [vehicleId], references: [id])
  vehicleId     String
}

model Infringement {
  id          String             @id @default(uuid())
  description String
  dateOccured DateTime
  status      InfringementStatus
  driver      User               @relation(fields: [userId], references: [id])
  userId      String
}

enum VehicleType {
  VAN
  TRUCK
  TRAILER
}

enum Role {
  USER
  DRIVER
  ADMIN
}

enum DefectStatus {
  INCOMPLETE
  COMPLETE
}

enum InfringementStatus {
  UNSIGNED
  SIGNED
}
