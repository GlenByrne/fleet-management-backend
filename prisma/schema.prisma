datasource db {
  provider = "postgresql"
  url      = "#"
}

generator client {
  provider = "prisma-client-js"
}

model Organisation {
  id        String                 @id @default(uuid())
  name      String
  users     UsersOnOrganisations[]
  vehicles  Vehicle[]
  depots    Depot[]
  fuelCards FuelCard[]
  tollTags  TollTag[]
}

model User {
  id            String                 @id @default(uuid())
  name          String
  email         String                 @unique
  password      String
  organisations UsersOnOrganisations[]
  infringements Infringement[]
}

model Depot {
  id                   String                 @id @default(uuid())
  name                 String                 @unique
  vehicles             Vehicle[]
  organisation         Organisation           @relation(fields: [organisationId], references: [id])
  organisationId       String
  UsersOnOrganisations UsersOnOrganisations[]
}

model UsersOnOrganisations {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  role           Role
  depot          Depot?       @relation(fields: [depotId], references: [id])
  depotId        String?
  inviteAccepted Boolean      @default(false)

  @@id([userId, organisationId])
}

model Vehicle {
  id                     String       @id @default(uuid())
  type                   VehicleType
  registration           String       @unique
  make                   String
  model                  String
  owner                  String
  cvrt                   DateTime?
  thirteenWeekInspection DateTime?
  tachoCalibration       DateTime?
  depot                  Depot?       @relation(fields: [depotId], references: [id])
  depotId                String?
  fuelCard               FuelCard?
  tollTag                TollTag?
  defects                Defect[]
  organisation           Organisation @relation(fields: [organisationId], references: [id])
  organisationId         String
}

model FuelCard {
  id             String       @id @default(uuid())
  cardNumber     String       @unique
  cardProvider   String
  vehicle        Vehicle?     @relation(fields: [vehicleId], references: [id])
  vehicleId      String?      @unique
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
}

model TollTag {
  id             String       @id @default(uuid())
  tagNumber      String       @unique
  tagProvider    String
  vehicle        Vehicle?     @relation(fields: [vehicleId], references: [id])
  vehicleId      String?      @unique
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
}

model Defect {
  id            String       @id @default(uuid())
  description   String
  reporter      String
  dateReported  DateTime
  dateCompleted DateTime?
  status        DefectStatus @default(INCOMPLETE)
  vehicle       Vehicle      @relation(fields: [vehicleId], references: [id])
  vehicleId     String
}

model Infringement {
  id          String             @id @default(uuid())
  description String
  dateOccured DateTime
  status      InfringementStatus
  driver      User               @relation(fields: [userId], references: [id])
  userId      String
}

enum VehicleType {
  VAN
  TRUCK
  TRAILER
}

enum Role {
  OWNER
  ADMIN
  USER
  DRIVER
}

enum DefectStatus {
  INCOMPLETE
  COMPLETE
}

enum InfringementStatus {
  UNSIGNED
  SIGNED
}
