### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AddCompanyInput {
  adminName: String!
  email: String!
  name: String!
  password: String!
}

type AddCompanyPayload {
  company: Company
  token: String
  user: UsersPayload
}

input AddDefectInput {
  dateReported: DateTime!
  description: String!
  status: String
  vehicleId: ID!
}

input AddDepotInput {
  name: String!
}

input AddFuelCardInput {
  cardNumber: String!
  cardProvider: String!
  depotId: String
}

input AddTollTagInput {
  depotId: String
  tagNumber: String!
  tagProvider: String!
}

input AddUserInput {
  depotId: String!
  email: String!
  name: String!
  password: String!
  role: Role!
}

input AddVehicleInput {
  cvrtDueDate: DateTime
  depotId: String
  fuelCardId: String
  make: String!
  model: String!
  owner: String!
  registration: String!
  tachoCalibrationDueDate: DateTime
  thirteenWeekInspectionDueDate: DateTime
  tollTagId: String
  type: VehicleType!
}

type AuthPayload {
  token: String
  user: UsersPayload
}

type Company {
  depots: [Depot!]!
  fuelCards: [FuelCard!]!
  id: ID!
  name: String!
  tollTags: [TollTag!]!
  users: [User!]!
  vehicles: [Vehicle!]!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Defect {
  dateCompleted: DateTime
  dateReported: DateTime!
  description: String!
  id: ID!
  status: String
}

input DeleteDepotInput {
  id: ID!
}

input DeleteFuelCardInput {
  id: ID!
}

input DeleteTollTagInput {
  id: ID!
}

input DeleteUserInput {
  id: ID!
}

input DeleteVehicleInput {
  id: ID!
}

type Depot {
  company: Company!
  fuelCards: [FuelCard!]!
  id: ID!
  name: String!
  tollTags: [TollTag!]!
  vehicles: [Vehicle!]!
}

input DepotInputFilter {
  searchCriteria: String
}

type FuelCard {
  cardNumber: String!
  cardProvider: String!
  company: Company!
  depot: Depot
  id: ID!
  vehicle: Vehicle
}

input FuelCardInputFilter {
  searchCriteria: String
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addCompany(data: AddCompanyInput!): AddCompanyPayload!
  addDefect(data: AddDefectInput!): Defect!
  addDepot(data: AddDepotInput!): Depot!
  addFuelCard(data: AddFuelCardInput!): FuelCard!
  addTollTag(data: AddTollTagInput!): TollTag!
  addUser(data: AddUserInput!): UsersPayload!
  addVehicle(data: AddVehicleInput!): Vehicle!
  deleteDepot(data: DeleteDepotInput!): Depot!
  deleteFuelCard(data: DeleteFuelCardInput!): FuelCard!
  deleteTollTag(data: DeleteTollTagInput!): TollTag!
  deleteUser(data: DeleteUserInput!): User!
  deleteVehicle(data: DeleteVehicleInput!): Vehicle!
  login(data: LoginInput!): AuthPayload!
  updateDepot(data: UpdateDepotInput!): Depot!
  updateFuelCard(data: UpdateFuelCardInput!): FuelCard!
  updateTollTag(data: UpdateTollTagInput!): TollTag!
  updateUser(data: UpdateUserInput!): UsersPayload!
  updateVehicle(data: UpdateVehicleInput!): Vehicle!
}

type Query {
  defectsForVehicle(vehicleId: ID!): [Defect]
  depots(data: DepotInputFilter): [Depot]
  fuelCards(data: FuelCardInputFilter): [FuelCard]
  fuelCardsNotAssigned: [FuelCard]
  me: UsersPayload
  tollTags(data: TollTagInputFilter): [TollTag]
  tollTagsNotAssigned: [TollTag]
  user(userId: ID!): UsersPayload
  users(data: UsersInputFilter): [UsersPayload]
  vehicle(vehicleId: ID!): Vehicle
  vehicles(data: VehicleInputFilter): [Vehicle]
  vehiclesInDepot(depotId: ID!): [Vehicle]
}

enum Role {
  Admin
  Driver
  User
}

type TollTag {
  company: Company!
  depot: Depot
  id: ID!
  tagNumber: String!
  tagProvider: String!
  vehicle: Vehicle
}

input TollTagInputFilter {
  searchCriteria: String
}

input UpdateDepotInput {
  id: ID!
  name: String!
}

input UpdateFuelCardInput {
  cardNumber: String!
  cardProvider: String!
  depotId: String
  id: ID!
}

input UpdateTollTagInput {
  depotId: String
  id: ID!
  tagNumber: String!
  tagProvider: String!
}

input UpdateUserInput {
  depotId: String!
  email: String!
  id: ID!
  name: String!
  role: Role!
}

input UpdateVehicleInput {
  cvrtDueDate: DateTime
  depotId: String
  fuelCardId: String
  id: String!
  make: String!
  model: String!
  owner: String!
  registration: String!
  tachoCalibrationDueDate: DateTime
  thirteenWeekInspectionDueDate: DateTime
  tollTagId: String
  type: VehicleType!
}

type User {
  company: Company!
  depot: Depot
  email: String!
  id: ID!
  name: String!
  password: String!
  role: Role!
}

input UsersInputFilter {
  searchCriteria: String
}

type UsersPayload {
  depot: Depot
  email: String!
  id: String!
  name: String!
  role: Role!
}

type Vehicle {
  company: Company!
  cvrtDueDate: DateTime
  defects: [Defect!]!
  depot: Depot
  fuelCard: FuelCard
  id: ID!
  make: String!
  model: String!
  owner: String!
  registration: String!
  tachoCalibrationDueDate: DateTime
  thirteenWeekInspectionDueDate: DateTime
  tollTag: TollTag
  type: VehicleType!
}

input VehicleInputFilter {
  searchCriteria: String
}

enum VehicleType {
  Trailer
  Truck
  Van
}
